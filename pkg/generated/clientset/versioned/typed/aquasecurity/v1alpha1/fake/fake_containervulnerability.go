// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeContainerVulnerabilities implements ContainerVulnerabilityInterface
type FakeContainerVulnerabilities struct {
	Fake *FakeAquasecurityV1alpha1
}

var containervulnerabilitiesResource = schema.GroupVersionResource{Group: "aquasecurity.github.io", Version: "v1alpha1", Resource: "containervulnerabilities"}

var containervulnerabilitiesKind = schema.GroupVersionKind{Group: "aquasecurity.github.io", Version: "v1alpha1", Kind: "ContainerVulnerability"}

// Get takes name of the containerVulnerability, and returns the corresponding containerVulnerability object, and an error if there is any.
func (c *FakeContainerVulnerabilities) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ContainerVulnerability, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(containervulnerabilitiesResource, name), &v1alpha1.ContainerVulnerability{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ContainerVulnerability), err
}

// List takes label and field selectors, and returns the list of ContainerVulnerabilities that match those selectors.
func (c *FakeContainerVulnerabilities) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ContainerVulnerabilityList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(containervulnerabilitiesResource, containervulnerabilitiesKind, opts), &v1alpha1.ContainerVulnerabilityList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ContainerVulnerabilityList{ListMeta: obj.(*v1alpha1.ContainerVulnerabilityList).ListMeta}
	for _, item := range obj.(*v1alpha1.ContainerVulnerabilityList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested containerVulnerabilities.
func (c *FakeContainerVulnerabilities) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(containervulnerabilitiesResource, opts))
}

// Create takes the representation of a containerVulnerability and creates it.  Returns the server's representation of the containerVulnerability, and an error, if there is any.
func (c *FakeContainerVulnerabilities) Create(ctx context.Context, containerVulnerability *v1alpha1.ContainerVulnerability, opts v1.CreateOptions) (result *v1alpha1.ContainerVulnerability, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(containervulnerabilitiesResource, containerVulnerability), &v1alpha1.ContainerVulnerability{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ContainerVulnerability), err
}

// Update takes the representation of a containerVulnerability and updates it. Returns the server's representation of the containerVulnerability, and an error, if there is any.
func (c *FakeContainerVulnerabilities) Update(ctx context.Context, containerVulnerability *v1alpha1.ContainerVulnerability, opts v1.UpdateOptions) (result *v1alpha1.ContainerVulnerability, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(containervulnerabilitiesResource, containerVulnerability), &v1alpha1.ContainerVulnerability{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ContainerVulnerability), err
}

// Delete takes name of the containerVulnerability and deletes it. Returns an error if one occurs.
func (c *FakeContainerVulnerabilities) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(containervulnerabilitiesResource, name), &v1alpha1.ContainerVulnerability{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeContainerVulnerabilities) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(containervulnerabilitiesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ContainerVulnerabilityList{})
	return err
}

// Patch applies the patch and returns the patched containerVulnerability.
func (c *FakeContainerVulnerabilities) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ContainerVulnerability, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(containervulnerabilitiesResource, name, pt, data, subresources...), &v1alpha1.ContainerVulnerability{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ContainerVulnerability), err
}
