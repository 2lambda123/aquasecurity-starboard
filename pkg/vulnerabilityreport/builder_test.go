package vulnerabilityreport_test

import (
	"testing"

	"github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
	"github.com/aquasecurity/starboard/pkg/starboard"
	"github.com/aquasecurity/starboard/pkg/vulnerabilityreport"
	"github.com/onsi/gomega"
	appsv1 "k8s.io/api/apps/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/utils/pointer"
)

func TestBuilder(t *testing.T) {
	g := gomega.NewGomegaWithT(t)
	report, err := vulnerabilityreport.NewReportBuilder(scheme.Scheme).
		Controller(&appsv1.ReplicaSet{
			ObjectMeta: metav1.ObjectMeta{
				Name:      "some-owner",
				Namespace: "qa",
			},
		}).
		Container("my-container").
		PodSpecHash("xyz").
		Data(v1alpha1.VulnerabilityReportData{}).
		Get()

	g.Expect(err).ToNot(gomega.HaveOccurred())
	g.Expect(report).To(gomega.Equal(v1alpha1.VulnerabilityReport{
		ObjectMeta: metav1.ObjectMeta{
			Name:      "replicaset-some-owner-my-container",
			Namespace: "qa",
			OwnerReferences: []metav1.OwnerReference{
				{
					APIVersion:         "apps/v1",
					Kind:               "ReplicaSet",
					Name:               "some-owner",
					Controller:         pointer.BoolPtr(true),
					BlockOwnerDeletion: pointer.BoolPtr(false),
				},
			},
			Labels: map[string]string{
				starboard.LabelResourceKind:      "ReplicaSet",
				starboard.LabelResourceName:      "some-owner",
				starboard.LabelResourceNamespace: "qa",
				starboard.LabelContainerName:     "my-container",
				starboard.LabelResourceSpecHash:  "xyz",
			},
		},
		Report: v1alpha1.VulnerabilityReportData{},
	}))
}
