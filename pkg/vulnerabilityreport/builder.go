package vulnerabilityreport

import (
	"fmt"
	"strings"

	"github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
	"github.com/aquasecurity/starboard/pkg/kube"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
)

type NameBuilder interface {
	Owner(owner metav1.Object) NameBuilder
	Container(name string) NameBuilder
	Get() (string, error)
}

type nameBuilder struct {
	scheme    *runtime.Scheme
	owner     metav1.Object
	container string
}

func NewNameBuilder(scheme *runtime.Scheme) NameBuilder {
	return &nameBuilder{
		scheme: scheme,
	}
}

func (b *nameBuilder) Owner(owner metav1.Object) NameBuilder {
	b.owner = owner
	return b
}

func (b *nameBuilder) Container(name string) NameBuilder {
	b.container = name
	return b
}

func (b *nameBuilder) Get() (string, error) {
	kind, err := kube.KindForObject(b.owner, b.scheme)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("%s-%s-%s", strings.ToLower(kind),
		b.owner.GetName(), b.container), nil
}

type Builder interface {
	Owner(owner metav1.Object) Builder
	Container(name string) Builder
	PodSpecHash(hash string) Builder
	ScanResult(result v1alpha1.VulnerabilityScanResult) Builder
	ReportName(name string) Builder
	Get() (v1alpha1.VulnerabilityReport, error)
}

func NewBuilder(scheme *runtime.Scheme) Builder {
	return &builder{
		scheme: scheme,
	}
}

type builder struct {
	scheme     *runtime.Scheme
	owner      metav1.Object
	container  string
	hash       string
	result     v1alpha1.VulnerabilityScanResult
	reportName string
}

func (b *builder) Owner(owner metav1.Object) Builder {
	b.owner = owner
	return b
}

func (b *builder) Container(name string) Builder {
	b.container = name
	return b
}

func (b *builder) PodSpecHash(hash string) Builder {
	b.hash = hash
	return b
}

func (b *builder) ScanResult(result v1alpha1.VulnerabilityScanResult) Builder {
	b.result = result
	return b
}

func (b *builder) ReportName(name string) Builder {
	b.reportName = name
	return b
}

func (b *builder) Get() (v1alpha1.VulnerabilityReport, error) {
	kind, err := kube.KindForObject(b.owner, b.scheme)
	if err != nil {
		return v1alpha1.VulnerabilityReport{}, err
	}

	labels := map[string]string{
		kube.LabelResourceKind:      kind,
		kube.LabelResourceName:      b.owner.GetName(),
		kube.LabelResourceNamespace: b.owner.GetNamespace(),
		kube.LabelContainerName:     b.container,
	}

	if b.hash != "" {
		labels[kube.LabelPodSpecHash] = b.hash
	}

	report := v1alpha1.VulnerabilityReport{
		ObjectMeta: metav1.ObjectMeta{
			Name:      b.reportName,
			Namespace: b.owner.GetNamespace(),
			Labels:    labels,
		},
		Report: b.result,
	}
	err = controllerutil.SetOwnerReference(b.owner, &report, b.scheme)
	if err != nil {
		return v1alpha1.VulnerabilityReport{}, err
	}
	return report, nil
}
