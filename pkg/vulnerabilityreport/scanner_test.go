package vulnerabilityreport

import (
	"github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
	"github.com/aquasecurity/starboard/pkg/docker"
	"github.com/aquasecurity/starboard/pkg/ext"
	"github.com/aquasecurity/starboard/pkg/kube"
	"github.com/aquasecurity/starboard/pkg/starboard"
	"github.com/stretchr/testify/assert"
	"io"
	corev1 "k8s.io/api/core/v1"
	"testing"
)

//fakePlugin is a minimal implementation of Plugin just sufficient to meet the runtime requirements of a caller of
//GetScanJobSpec or ParseVulnerabilityScanResult
type fakePlugin struct{}

func (fakePlugin) GetScanJobSpec(_ corev1.PodSpec, _ map[string]docker.Auth) (corev1.PodSpec, []*corev1.Secret, error) {
	return corev1.PodSpec{}, []*corev1.Secret{}, nil
}

func (fakePlugin) ParseVulnerabilityScanResult(_ string, _ io.ReadCloser) (v1alpha1.VulnerabilityScanResult, error) {
	return v1alpha1.VulnerabilityScanResult{}, nil
}

func TestPrepareScanJob(t *testing.T) {
	s := &Scanner{plugin: fakePlugin{}, IDGenerator: ext.NewSimpleIDGenerator()}
	config := starboard.ConfigData{"scanJob.tolerations": `[{"key":"k"}]`}
	job, _, err := s.prepareScanJob(kube.Object{}, corev1.PodSpec{}, map[string]docker.Auth{}, config)
	assert.NoError(t, err)
	assert.NotEmpty(t, job.Spec.Template.Spec.Tolerations)
}
