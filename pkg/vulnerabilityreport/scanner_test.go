package vulnerabilityreport

import (
	"github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
	"github.com/aquasecurity/starboard/pkg/docker"
	"github.com/aquasecurity/starboard/pkg/ext"
	"github.com/aquasecurity/starboard/pkg/kube"
	"github.com/aquasecurity/starboard/pkg/starboard"
	"github.com/stretchr/testify/assert"
	"io"
	corev1 "k8s.io/api/core/v1"
	"testing"
)

//fakePlugin is a minimal implementation of Plugin just sufficient to meet the runtime requirements of a caller of
//GetScanJobSpec or ParseVulnerabilityScanResult
type fakePlugin struct{}

func (fakePlugin) GetScanJobSpec(_ corev1.PodSpec, _ map[string]docker.Auth) (corev1.PodSpec, []*corev1.Secret, error) {
	return corev1.PodSpec{}, []*corev1.Secret{}, nil
}

func (fakePlugin) ParseVulnerabilityScanResult(_ string, _ io.ReadCloser) (v1alpha1.VulnerabilityScanResult, error) {
	return v1alpha1.VulnerabilityScanResult{}, nil
}

func TestPrepareScanJob(t *testing.T) {
	s := &Scanner{plugin: fakePlugin{}, IDGenerator: ext.NewSimpleIDGenerator()}
	config := starboard.ConfigData{"vulnerabilityScanner.podTolerations": `[{"key":"k"}]`}
	job, _, err := s.prepareScanJob(kube.Object{}, corev1.PodSpec{}, map[string]docker.Auth{}, config)
	assert.NoError(t, err)
	assert.NotEmpty(t, job.Spec.Template.Spec.Tolerations)
}

func TestGetVulnerabilityScannerPodTolerations(t *testing.T) {
	testcases := []struct {
		name     string
		config   starboard.ConfigData
		expected []corev1.Toleration
	}{
		{
			name:     "no vulnerabilityScanner.podTolerations in ConfigData",
			config:   starboard.ConfigData{},
			expected: []corev1.Toleration{},
		},
		{
			name:     "vulnerabilityScanner.podTolerations value is not json",
			config:   starboard.ConfigData{"vulnerabilityScanner.podTolerations": `lolwut`},
			expected: []corev1.Toleration{},
		},
		{
			name:     "empty JSON array",
			config:   starboard.ConfigData{"vulnerabilityScanner.podTolerations": `[]`},
			expected: []corev1.Toleration{},
		},
		{
			name: "one valid toleration",
			config: starboard.ConfigData{
				"vulnerabilityScanner.podTolerations": `[{"key":"key1","operator":"Equal","value":"value1","effect":"NoSchedule"}]`},
			expected: []corev1.Toleration{{
				Key:      "key1",
				Operator: "Equal",
				Value:    "value1",
				Effect:   "NoSchedule",
			}},
		},
		{
			name: "mutiple valid tolerations",
			config: starboard.ConfigData{
				"vulnerabilityScanner.podTolerations": `[{"key":"key1","operator":"Equal","value":"value1","effect":"NoSchedule"}, 
					  {"key":"key2","operator":"Equal","value":"value2","effect":"NoSchedule"}]`},
			expected: []corev1.Toleration{
				{
					Key:      "key1",
					Operator: "Equal",
					Value:    "value1",
					Effect:   "NoSchedule",
				},
				{
					Key:      "key2",
					Operator: "Equal",
					Value:    "value2",
					Effect:   "NoSchedule",
				},
			},
		},
	}

	for _, tc := range testcases {
		got := getVulnerabilityScannerPodTolerations(tc.config)
		assert.Equal(t, tc.expected, got, tc.name)
	}
}
